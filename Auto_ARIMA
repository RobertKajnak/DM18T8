#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Apr 22 20:24:08 2018

@author: edoardoguerriero
"""
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 21 16:07:14 2018

@author: edoardoguerriero
"""
import pandas as pd
import numpy as np
from statsmodels.tsa.arima_model import ARIMA
from pyramid.arima import auto_arima
from sklearn.metrics import mean_squared_error


n_patients = 23
id_patients = ['patient%d.csv' %i for i in range(n_patients)]
MSE = np.zeros(n_patients)
#tests = np.matrix()

for patient in range(n_patients):
    
    '''Load files'''    
    name_file = id_patients[patient]
    df = pd.read_csv(name_file, delimiter=',')
    
    '''Count number of days that compose the time serie''' 
    n_days = df.shape[0]
        
    '''Create dates indexing and convert data frame column into time serie object'''   
    dates = pd.date_range('1/1/2014', periods=n_days, freq='D')
    mood_time_serie = pd.Series(df['mood'].values, index = dates)
    
    
    
    stepwise_model = auto_arima(mood_time_serie, start_p=0, start_q=0,
                           max_p=3, max_q=3, m=5,
                           start_P=0, seasonal=True,
                           d=1, D=1, trace=True,
                           error_action='ignore',  
                           suppress_warnings=True, 
                           stepwise=True)
    #print(stepwise_model.aic())
    

    fitting = stepwise_model.fit(mood_time_serie)
    forecast = stepwise_model.predict(len(mood_time_serie))
    array_mood_time_serie = np.asarray(mood_time_serie)
    MSE[patient] = np.mean((array_mood_time_serie - forecast)**2)
    future_forecast = pd.DataFrame(forecast, mood_time_serie.index)
    graph = pd.concat([mood_time_serie, future_forecast],axis=1)
    graph2 = pd.DataFrame(graph.values, columns=['Mood', 'Predictions'])
    graph.plot(lw=2, colormap='jet', marker='.', markersize=10, title='ARIMA model')
    print(MSE[patient])
    
indices = np.argsort(MSE)
winner = indices[0]
runner_up = indices[1]

#print('The winner model is based on patient %s with MSE = %d' %patient[winner], MSE[winner])
#print('The runner up model is based on patient %s with MSE = %d' %patient[runner_up], MSE[runner_up])

